/*
<template>
  <div class="container">
    <h1>SipariÅŸ Listesi - {{ domain }}</h1>
    <p>
      Backend: <strong>{{ apiBase }}</strong>
    </p>

    <p v-if="loading">YÃ¼kleniyor...</p>
    <p v-if="error" class="error">Hata: {{ error }}</p>

    <table v-if="orders.length" class="order-table">
      <thead>
        <tr>
          <th>MÃ¼ÅŸteri</th>
          <th>Email</th>
          <th>Toplam</th>
          <th>Tarih</th>
          <th>Detaylar</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="order in orders" :key="order.id">
          <td>{{ order.expand.customer?.name }}</td>
          <td>{{ order.expand.customer?.email }}</td>
          <td>{{ order.orderTotal }} â‚º</td>
          <td>{{ formatDate(order.created) }}</td>
          <td><button @click="showDetails(order)">GÃ¶rÃ¼ntÃ¼le</button></td>
        </tr>
      </tbody>
    </table>

    <!-- Modal -->
    <div
      v-if="selectedOrder"
      class="modal-overlay"
      @click.self="selectedOrder = null"
    >
      <div class="modal">
        <h2>ðŸ§¾ SipariÅŸ DetayÄ±</h2>
        <p>
          <strong>MÃ¼ÅŸteri:</strong> {{ selectedOrder.expand.customer?.name }}
        </p>
        <p>
          <strong>Email:</strong> {{ selectedOrder.expand.customer?.email }}
        </p>
        <p>
          <strong>Adres:</strong>
          {{ selectedOrder.expand.address?.city }}
        </p>
        <p><strong>Tutar:</strong> {{ selectedOrder.orderTotal }} â‚º</p>
        <h3>ðŸ›’ ÃœrÃ¼nler</h3>
        <ul>
          <li
            v-for="item in selectedOrder.expand.order_items_via_order"
            :key="item.id"
          >
            {{ item.productName }} - {{ item.quantity }} adet x
            {{ item.unitPrice }} = {{ item.totalPrice }} â‚º
          </li>
        </ul>
        <h3>ðŸ’³ Ã–deme</h3>
        <p>
          {{ selectedOrder.expand.payments_via_order[0]?.method }} -
          {{ selectedOrder.expand.payments_via_order[0]?.status }}
        </p>
        <button class="close" @click="selectedOrder = null">Kapat</button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount } from "vue";
import PocketBase from "pocketbase";

const domain = window.location.hostname;

let apiBase = "";
switch (domain) {
  case "irfanvue.eronor.de":
    apiBase = "https://irfan.eronor.de";
    break;
  case "thomas.eronor.de":
    apiBase = "https://thomasback.eronor.de";
    break;
  case "ozkan.eronor.de":
    apiBase = "https://tatar66.eronor.de";
    break;
  default:
    apiBase = "https://irfan.eronor.de";
}

const pb = new PocketBase(apiBase);

const orders = ref([]);
const selectedOrder = ref(null);
const error = ref(null);
const loading = ref(true);

async function fetchOrders() {
  try {
    loading.value = true;
    // orders.value = await pb.collection("order_infos").getFullList({
    //   sort: "-created",
    //   expand: "customer,address,payments_via_order,order_items_via_order",
    // });
    const response = await pb.collection("order_infos").getList(1, 100, {
      sort: "-created",
      expand: "customer,address,payments_via_order,order_items_via_order",
    });
    orders.value = response.items;
  } catch (err) {
    error.value = err.message;
  } finally {
    loading.value = false;
  }
}

function formatDate(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleString();
}

function showDetails(order) {
  selectedOrder.value = order;
}

onMounted(() => {
  fetchOrders();
  // pb.collection("order_infos").subscribe("*", fetchOrders);
  // Real-time listener
  pb.collection("order_infos").subscribe("*", async ({ action, record }) => {
    if (action === "create") {
      orders.value.unshift(record);
    } else if (action === "update") {
      const index = orders.value.findIndex((c) => c.id === record.id);
      if (index !== -1) orders.value[index] = record;
    } else if (action === "delete") {
      orders.value = orders.value.filter((c) => c.id !== record.id);
    }
  });
});

onBeforeUnmount(() => {
  pb.collection("order_infos").unsubscribe("*");
});
</script>

<style>
.container {
  font-family: sans-serif;
  max-width: 900px;
  margin: 2rem auto;
  padding: 1rem;
}

.order-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
}

.order-table th,
.order-table td {
  border: 1px solid #ccc;
  padding: 8px 12px;
  text-align: left;
}

.order-table th {
  background-color: #f5f5f5;
}

.error {
  color: red;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal {
  background: white;
  padding: 2rem;
  max-width: 500px;
  border-radius: 8px;
}

.modal h3 {
  margin-top: 1rem;
}

.modal .close {
  margin-top: 1rem;
}
</style>

*/